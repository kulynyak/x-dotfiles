# Configuration for Alacritty, the GPU enhanced terminal emulator

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty it self.
env:
  # TERM env customization.
  #
  # If this property is not set, alacritty will set it to xterm-256color.
  #
  # Note that some xterm terminfo databases don't declare support for italics.
  # You can verify this by checking for the presence of `smso` and `sitm` in
  # `infocmp xterm-256color`.
  TERM: xterm-256color

# Shell
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/zsh.
# Entries in shell.args are passed unmodified as arguments to the shell.
#
shell:
  program: /usr/local/bin/zsh
  args:
    - --login
    # - -c
    # - tmux

window:
  dynamic_title: true
  # Window dimensions in character columns and lines
  # (changes require restart)
  dimensions:
    columns: 209
    lines: 61

  # Adds this many blank pixels of padding around the window
  # Units are physical pixels; this is not DPI aware.
  # (change requires restart)
  padding:
    x: 1
    y: 1

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: true

  # Window decorations
  # Setting this to false will result in window without borders and title bar.
  decorations: none

# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: false

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 10000

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  multiplier: 3

# Font configuration (changes require restart)
font:
  # The normal (roman) font face to use.
  normal:
    family: 'MesloLGS NF'
    style: Regular

  # The bold font face
  bold:
    family: 'MesloLGS NF'
    style: Bold
  # The italic font face
  italic:
    family: 'MesloLGS NF'
    style: Italic

  # Point size of the font
  size: 13

  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 1
    y: -1

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increase the x offset to move the glyph to
  # the right, increase the y offset to move the glyph upward.
  glyph_offset:
    x: 0
    y: 0

  # OS X only: use thin stroke font rendering. Thin strokes are suitable
  # for retina displays, but for non-retina you probably want this set to
  # false.
  use_thin_strokes: true

debug:
  # Should display the render timer
  render_timer: false

#+begin_theme
colors:
  selection:
    text: '#000000'
    background: '#ffffff'

  cursor:
    text: CellBackground
    cursor: CellForeground

  # Normal colors
  normal:
    black: '#000000'
    red: '#cc0403'
    green: '#19cb00'
    yellow: '#cecb00'
    blue: '#0d73cc'
    magenta: '#cb1ed1'
    cyan: '#0dcdcd'
    white: '#dddddd'

  # Bright colors
  bright:
    black: '#767676'
    red: '#f2201f'
    green: '#23fd00'
    yellow: '#fffd00'
    blue: '#1a8fff'
    magenta: '#fd28ff'
    cyan: '#14ffff'
    white: '#ffffff'

#+end_theme
# Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Possible values for `animation`
# `Ease`
# `EaseOut`
# `EaseOutSine`
# `EaseOutQuad`
# `EaseOutCubic`
# `EaseOutQuart`
# `EaseOutQuint`
# `EaseOutExpo`
# `EaseOutCirc`
# `Linear`
#
# To completely disable the visual bell, set its duration to 0.
#
bell:
  animation: EaseOutExpo
  duration: 1

# Background opacity
background_opacity: 0.95

# Mouse bindings
#
# Currently doesn't support modifiers. Both the `mouse` and `action` fields must
# be specified.
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# Values for `action`:
# - Paste
# - PasteSelection
# - Copy (TODO)
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: true

  url:
    # URL launcher
    #
    # This program is executed when clicking on a text which is recognized as a URL.
    # The URL is always added to the command as the last parameter.
    launcher: browser
    # URL modifiers
    #
    # These are the modifiers that need to be held down for opening URLs when clicking
    # on them. The available modifiers are documented in the key binding section.
    #modifiers: Control|Shift
    # modifiers: Control

selection:
  semantic_escape_chars: ',│`|:"'' ()[]{}<>'

  # When set to `true`, selected text will be copied to both the primary and
  # the selection clipboard. Otherwise, it will only be copied to the selection
  # clipboard.
  save_to_clipboard: true

cursor:
  # Cursor style
  #
  # Values for 'style':
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Underline
  thickness: 0.14
  unfocused_hollow: true

# Live config reload (changes require restart)
live_config_reload: true

# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# A list with all available `key` names can be found here:
# https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action`, `chars`, or `command` field must be present.
#   `action` must be one of `Paste`, `PasteSelection`, `Copy`, or `Quit`.
#   `chars` writes the specified string every time that binding is activated.
#     These should generally be escape sequences, but they can be configured to
#     send arbitrary strings of bytes.
#   `command` must be a map containing a `program` string, and `args` array of
#     strings. For example:
#     - { ... , command: { program: "alacritty", args: ["-e", "vttest"] } }
key_bindings:
  - { key: V, mods: Command, action: Paste }
  - { key: C, mods: Command, action: Copy }
  - { key: Q, mods: Command, action: Quit }
  - { key: N, mods: Command, action: SpawnNewInstance }
  - { key: Home, chars: "\eOH", mode: AppCursor }
  - { key: Home, chars: "\e[H", mode: ~AppCursor }
  - { key: End, chars: "\eOF", mode: AppCursor }
  - { key: End, chars: "\e[F", mode: ~AppCursor }
  - { key: Key0, mods: Command, action: ResetFontSize }
  - { key: Equals, mods: Command, action: IncreaseFontSize }
  - { key: Minus, mods: Command, action: DecreaseFontSize }
  - { key: PageUp, mods: Shift, chars: "\e[5;2~" }
  - { key: PageUp, mods: Control, chars: "\e[5;5~" }
  - { key: PageUp, chars: "\e[5~" }
  - { key: PageDown, mods: Shift, chars: "\e[6;2~" }
  - { key: PageDown, mods: Control, chars: "\e[6;5~" }
  - { key: PageDown, chars: "\e[6~" }
  - { key: Tab, mods: Shift, chars: "\e[Z" }
  - { key: Back, chars: "" }
  - { key: Back, mods: Alt, chars: "\e" }
  - { key: Insert, chars: "\e[2~" }
  - { key: Delete, chars: "\e[3~" }
  - { key: Left, mods: Shift, chars: "\e[1;2D" }
  - { key: Left, mods: Control, chars: "\e[1;5D" }
  - { key: Left, mods: Alt, chars: "\e[1;3D" }
  # - { key: Left,                    chars: "\x1b[D",   mode: ~AppCursor  }
  # - { key: Left,                    chars: "\x1bOD",   mode: AppCursor   }
  - { key: Right, mods: Shift, chars: "\e[1;2C" }
  - { key: Right, mods: Control, chars: "\e[1;5C" }
  - { key: Right, mods: Alt, chars: "\e[1;3C" }
  # - { key: Right,                   chars: "\x1b[C",   mode: ~AppCursor  }
  # - { key: Right,                   chars: "\x1bOC",   mode: AppCursor   }
  - { key: Up, mods: Shift, chars: "\e[1;2A" }
  - { key: Up, mods: Control, chars: "\e[1;5A" }
  - { key: Up, mods: Alt, chars: "\e[1;3A" }
  # - { key: Up,                      chars: "\x1b[A",   mode: ~AppCursor  }
  # - { key: Up,                      chars: "\x1bOA",   mode: AppCursor   }
  - { key: Down, mods: Shift, chars: "\e[1;2B" }
  - { key: Down, mods: Control, chars: "\e[1;5B" }
  - { key: Down, mods: Alt, chars: "\e[1;3B" }
  # - { key: Down,                    chars: "\x1b[B",   mode: ~AppCursor  }
  # - { key: Down,                    chars: "\x1bOB",   mode: AppCursor   }
  - { key: F1, chars: "\eOP" }
  - { key: F2, chars: "\eOQ" }
  - { key: F3, chars: "\eOR" }
  - { key: F4, chars: "\eOS" }
  - { key: F5, chars: "\e[15~" }
  - { key: F6, chars: "\e[17~" }
  - { key: F7, chars: "\e[18~" }
  - { key: F8, chars: "\e[19~" }
  - { key: F9, chars: "\e[20~" }
  - { key: F10, chars: "\e[21~" }
  - { key: F11, chars: "\e[23~" }
  - { key: F12, chars: "\e[24~" }
  - { key: F1, mods: Shift, chars: "\e[1;2P" }
  - { key: F2, mods: Shift, chars: "\e[1;2Q" }
  - { key: F3, mods: Shift, chars: "\e[1;2R" }
  - { key: F4, mods: Shift, chars: "\e[1;2S" }
  - { key: F5, mods: Shift, chars: "\e[15;2~" }
  - { key: F6, mods: Shift, chars: "\e[17;2~" }
  - { key: F7, mods: Shift, chars: "\e[18;2~" }
  - { key: F8, mods: Shift, chars: "\e[19;2~" }
  - { key: F9, mods: Shift, chars: "\e[20;2~" }
  - { key: F10, mods: Shift, chars: "\e[21;2~" }
  - { key: F11, mods: Shift, chars: "\e[23;2~" }
  - { key: F12, mods: Shift, chars: "\e[24;2~" }
  - { key: F1, mods: Control, chars: "\e[1;5P" }
  - { key: F2, mods: Control, chars: "\e[1;5Q" }
  - { key: F3, mods: Control, chars: "\e[1;5R" }
  - { key: F4, mods: Control, chars: "\e[1;5S" }
  - { key: F5, mods: Control, chars: "\e[15;5~" }
  - { key: F6, mods: Control, chars: "\e[17;5~" }
  - { key: F7, mods: Control, chars: "\e[18;5~" }
  - { key: F8, mods: Control, chars: "\e[19;5~" }
  - { key: F9, mods: Control, chars: "\e[20;5~" }
  - { key: F10, mods: Control, chars: "\e[21;5~" }
  - { key: F11, mods: Control, chars: "\e[23;5~" }
  - { key: F12, mods: Control, chars: "\e[24;5~" }
  - { key: F1, mods: Alt, chars: "\e[1;6P" }
  - { key: F2, mods: Alt, chars: "\e[1;6Q" }
  - { key: F3, mods: Alt, chars: "\e[1;6R" }
  - { key: F4, mods: Alt, chars: "\e[1;6S" }
  - { key: F5, mods: Alt, chars: "\e[15;6~" }
  - { key: F6, mods: Alt, chars: "\e[17;6~" }
  - { key: F7, mods: Alt, chars: "\e[18;6~" }
  - { key: F8, mods: Alt, chars: "\e[19;6~" }
  - { key: F9, mods: Alt, chars: "\e[20;6~" }
  - { key: F10, mods: Alt, chars: "\e[21;6~" }
  - { key: F11, mods: Alt, chars: "\e[23;6~" }
  - { key: F12, mods: Alt, chars: "\e[24;6~" }
  - { key: F1, mods: Command, chars: "\e[1;3P" }
  - { key: F2, mods: Command, chars: "\e[1;3Q" }
  - { key: F3, mods: Command, chars: "\e[1;3R" }
  - { key: F4, mods: Command, chars: "\e[1;3S" }
  - { key: F5, mods: Command, chars: "\e[15;3~" }
  - { key: F6, mods: Command, chars: "\e[17;3~" }
  - { key: F7, mods: Command, chars: "\e[18;3~" }
  - { key: F8, mods: Command, chars: "\e[19;3~" }
  - { key: F9, mods: Command, chars: "\e[20;3~" }
  - { key: F10, mods: Command, chars: "\e[21;3~" }
  - { key: F11, mods: Command, chars: "\e[23;3~" }
  - { key: F12, mods: Command, chars: "\e[24;3~" }
  - { key: D, mods: Command, chars: "\x06v" }
  - { key: D, mods: Command|Shift, chars: "\x06s" }
  - { key: W, mods: Command, chars: "\x06x" }
  - { key: H, mods: Command, chars: "\x06h" }
  - { key: J, mods: Command, chars: "\x06j" }
  - { key: K, mods: Command, chars: "\x06k" }
  - { key: L, mods: Command, chars: "\x06l" }
  - { key: T, mods: Command, chars: "\x06c" }
  - { key: RBracket, mods: Command|Shift, chars: "\x06n" }
  - { key: LBracket, mods: Command|Shift, chars: "\x06p" }
  - { key: Return, mods: Command|Shift, chars: "\x06z" }
  - { key: Key1, mods: Command, chars: "\x061" }
  - { key: Key2, mods: Command, chars: "\x062" }
  - { key: Key3, mods: Command, chars: "\x063" }
  - { key: Key4, mods: Command, chars: "\x064" }
  - { key: Key5, mods: Command, chars: "\x065" }
  - { key: Key6, mods: Command, chars: "\x066" }
  - { key: Key7, mods: Command, chars: "\x067" }
  - { key: Key8, mods: Command, chars: "\x068" }
  - { key: Key9, mods: Command, chars: "\x069" }
  - { key: Left, mods: Command, chars: "\x06H" }
  - { key: Down, mods: Command, chars: "\x06J" }
  - { key: Up, mods: Command, chars: "\x06K" }
  - { key: Right, mods: Command, chars: "\x06L" }
